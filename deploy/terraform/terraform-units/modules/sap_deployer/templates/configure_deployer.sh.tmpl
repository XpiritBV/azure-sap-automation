#!/usr/bin/env bash

local_user="${local_user}"
platform="${platform}"
app_token="${app_token}"
runner_group="${runner_group}"
repository="${repository}"
server_url="${server_url}"
api_url="${api_url}"
agent_pat="${agent_pat}"
agent_ado_url="${agent_ado_url}"
agent_pool="${agent_pool}"

case "$${platform}" in
  (github)
    REQUIRED_VARS=(
      "api_url"
      "repository"
      "app_token"
      "runner_group"
      "server_url"
    )
    ;;

  (devops)
    REQUIRED_VARS=(
      "agent_ado_url"
      "agent_pat"
      "agent_pool"
    )
    ;;

  (*)
    echo "Invalid platform: $${platform}"
    exit 1
    ;;
esac

missing_vars=false

for var in "$${REQUIRED_VARS[@]}"; do
  if [[ -z "$${!var}" ]]; then
    echo "Missing required variable: $var"
    missing_vars="true"
  fi
done

if [[ "$${missing_vars}" == "true" ]]; then
  exit 1
fi

set -euo pipefail

export agent_home="/home/$${local_user}/agent"

function setup_github_runner() {
  pushd $${agent_home}
  curl -sSfL $(curl -sSf https://api.github.com/repos/actions/runner/releases/latest | jq '.assets.[].browser_download_url' -r | egrep 'linux-x64-[0-9.]+tar.gz$') | tar zx

  runner_token=$(curl -Ss \
    -X POST \
    -H "Accept: application/vnd.github+json" \
    -H "Authorization: Bearer $${app_token}" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -L "$${api_url}/repos/$${repository}/actions/runners/registration-token" | jq -r .token)

  sudo chown -R "$${local_user}" $${agent_home}

  # Remove runner if it already exists
  ./config.sh remove --token $${runner_token} || true

  sudo runuser -l "$${local_user}" -c "$${agent_home}/config.sh --unattended --url $${server_url}/$${repository} --token $${runner_token} --runnergroup $${runner_group} --name $(hostname)"
  sudo ./svc.sh install $${local_user}
  sudo ./svc.sh start
  sudo ./svc.sh status
  popd
}

function setup_devops_runner() {
  pushd $${agent_home}
  curl -SsfL https://aka.ms/AAftpys | tar zx

  ./env.sh

  sudo chown -R "$${local_user}" $${agent_home}

  sudo runuser -l "$${local_user}" -c "$${agent_home}/config.sh --unattended --url $${agent_ado_url} --auth pat --pat $${agent_pat} --pool $${agent_pool} --agent $(hostname) --replace --acceptTeeEula"
  sudo ./svc.sh install $${local_user}
  sudo ./svc.sh start
  sudo ./svc.sh status
  popd
}

function install_deps_mariner() {
  tdnf install -y \
    ca-certificates \
    curl \
    dotnet-runtime-8.0 \
    dotnet-runtime-deps-8.0 \
    krb5-libs \
    libicu \
    lttng-ust \
    moby-cli \
    moby-engine \
    openssl-libs \
    zlib

  # Install jq, the Mariner version is ancient
  curl -sSfL $(curl -sSf https://api.github.com/repos/jqlang/jq/releases/latest | grep browser_download_url | egrep 'jq-linux-amd64"' | tr -d " " | tr -d "\""| sed 's/browser_download_url://g') -o jq
  sudo install -m755 jq /usr/local/bin/jq
}

function install_deps_ubuntu() {
  sudo apt-get update
  sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    docker.io \
    docker-compose \
    curl \
    gnupg \
    jq \
    lsb-release

    # Install dotnet 8.0
    version=$(cat /etc/os-release | grep 'VERSION_ID=' | cut -d= -f2 | tr -d "\"")
    curl -sSfL https://packages.microsoft.com/config/ubuntu/$${version}/packages-microsoft-prod.deb -o packages-microsoft-prod.deb
    sudo dpkg -i packages-microsoft-prod.deb

    sudo apt-get update
    sudo apt-get install -y \
      dotnet-runtime-8.0

    # Install jq, the Ubuntu version is ancient
    curl -sSfL $(curl -sSf https://api.github.com/repos/jqlang/jq/releases/latest | grep browser_download_url | egrep 'jq-linux-amd64"' | tr -d " " | tr -d "\""| sed 's/browser_download_url://g') -o jq
    sudo install -m755 jq /usr/local/bin/jq
}

# Install required packages for this VM to act as a runner on the platform and support docker containers
case $(cat /etc/os-release | grep "^ID="| cut -d= -f2 | tr -d "\"" | tr '[:upper:]' '[:lower:]') in
  (*mariner*)
    install_deps_mariner
    ;;

  (*ubuntu*)
    install_deps_ubuntu
    ;;
esac

if [[ -d $${agent_home} ]]; then
  echo "Runner might already be installed, let's try to stop it first"
  sudo $${agent_home}/svc.sh stop || true
fi

mkdir -p $${agent_home}

function setup_runner() {
  case "$${platform}" in
    (github)
      setup_github_runner
      ;;

    (devops)
      setup_devops_runner
      ;;
  esac
}

setup_runner

# Start docker service
sudo systemctl enable docker.service
sudo systemctl start docker.service
